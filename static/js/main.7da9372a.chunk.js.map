{"version":3,"sources":["assets/images/Feast.png","assets/images/Waffles.png","assets/images/Healthy.png","assets/images/Cooking.png","assets/images/Healthyfood.jpg","assets/images/Mealsize.jpg","assets/images/Family.jpg","assets/images/Fridge.jpg","assets/images/Diet.jpg","assets/images/Noodles.jpg","assets/images/Clock.jpg","redux/featuredReducer.js","redux/ActionTypes.js","redux/resultReducer.js","Components/Header.js","Components/Footer.js","Components/Loading.js","Components/Home.js","Components/About.js","Components/Services.js","Components/FiltersForm.js","Components/FieldsForm.js","Components/Recipes.js","Components/RecipeDetail.js","redux/ActionCreators.js","Components/Main.js","App.js","redux/configureStore.js","reportWebVitals.js","index.js"],"names":["module","exports","FeaturedReducer","state","isLoading","errMsg","featured","action","type","payload","ResultReducer","isEmpty","result","Header","useState","isOpen","setIsOpen","Fragment","light","color","expand","className","id","to","class","onClick","navbar","Footer","Loading","Home","props","items","src","altText","caption","header","key","activeIndex","setActiveIndex","animating","setAnimating","require","imgSources","next","nextIndex","length","previous","slides","map","item","index","onExiting","onExited","alt","captionText","captionHeader","view","featuredState","recipe","top","width","image","title","tag","readyInMinutes","servings","onClickHandler","newIndex","direction","directionText","About","Services","FiltersForm","addFields","resetSecondForm","clearResults","renderCheckboxes","box","info","xs","md","check","htmlFor","name","createCheckbox","outline","formElements","Array","from","document","getElementById","i","disabled","checked","onSubmit","e","preventDefault","objects","target","elements","el","filter","value","obj","Object","values","keys","form","isNumber","val","isNaN","Number","FieldsForm","renderFields","fetchResults","url","handleSubmit","Info","text","Recipes","secondForm","setSecondForm","resultState","recipes","renderRecipe","fields","field","model","placeholder","required","select","selected","hidden","validators","show","messages","renderField","RecipeDetail","ingredients","curr","amount","renderIngredients","instructions","renderInstructions","nutrients","bad","cl","includes","percentOfDailyNeeds","scope","renderNutrients","loadingFeatured","addFeatured","createRecipe","featuredFailed","loadingResult","addResult","resultFailed","emptyResult","console","log","nutrition","unit","analyzedInstructions","steps","step","Main","this","fetchFeatured","path","component","exact","match","find","parseInt","params","recipeId","Component","withRouter","connect","dispatch","fetch","then","response","ok","json","Error","status","statusText","error","message","results","catch","err","setTimeout","App","store","createStore","combineReducers","applyMiddleware","thunk","logger","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7da9372a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Feast.5f1d177f.png\";","module.exports = __webpack_public_path__ + \"static/media/Waffles.166a1946.png\";","module.exports = __webpack_public_path__ + \"static/media/Healthy.1705d521.png\";","module.exports = __webpack_public_path__ + \"static/media/Cooking.1e8ea249.png\";","module.exports = __webpack_public_path__ + \"static/media/Healthyfood.4177fa8a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Mealsize.ec7f1ef2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Family.c660154a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Fridge.9ea6c699.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Diet.5b4ef981.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Noodles.37510044.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Clock.31f03478.jpg\";","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const FeaturedReducer = (state = {\r\n    isLoading: false,\r\n    errMsg: null,\r\n    featured: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.LOADING_FEATURED:\r\n            return {isLoading: true, errMsg: null, featured: []}\r\n        case ActionTypes.ADD_FEATURED:\r\n            return {isLoading: false, errMsg: null, featured: action.payload}\r\n        case ActionTypes.FEATURED_FAILED:\r\n            return {isLoading: false, errMsg: action.payload, featured: []}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","export const LOADING_FEATURED = \"LOADING_FEATURED\";\r\nexport const ADD_FEATURED = \"ADD_FEATURED\";\r\nexport const FEATURED_FAILED = \"FEATURED_FAILED\";\r\n\r\nexport const LOADING_RESULT = \"LOADING_RESULT\";\r\nexport const ADD_RESULT = \"ADD_RESULT\";\r\nexport const RESULT_FAILED = \"RESULT_FAILED\";\r\nexport const CLEAR_RESULTS = \"CLEAR_RESULTS\";\r\nexport const EMPTY_RESULT = \"EMPTY_RESULT\";","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const ResultReducer = (state = {\r\n    isEmpty: false,\r\n    isLoading: false,\r\n    errMsg: null,\r\n    result: []\r\n}, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.LOADING_RESULT:\r\n            return {isLoading: true, errMsg: null, result: [], isEmpty: false}\r\n        case ActionTypes.ADD_RESULT:\r\n            return {isLoading: false, errMsg: null, result: action.payload, isEmpty: false}\r\n        case ActionTypes.RESULT_FAILED:\r\n            return {isLoading: false, errMsg: action.payload, result: [], isEmpty: false}\r\n        case ActionTypes.CLEAR_RESULTS:\r\n            return {isLoading: false, errMsg: null, result: action.payload, isEmpty: false}\r\n        case ActionTypes.EMPTY_RESULT:\r\n            return {isLoading: false, errMsg: null, result: [], isEmpty: true}\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { useState } from 'react';\r\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem } from 'reactstrap';\r\nimport { NavLink, Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const toggle = () => setIsOpen(!isOpen);\r\n  return (\r\n    <React.Fragment>\r\n      <Navbar light color=\"light\" expand=\"md\" className=\"sticky-top\">\r\n        <div className=\"container\">\r\n          <NavbarBrand id=\"logo\" className=\"text-danger mr-4\"><Link to=\"/home\"><i class=\"fas fa-utensils\"></i> RecipesWorld</Link></NavbarBrand>\r\n          <NavbarToggler onClick={toggle} />\r\n          <Collapse isOpen={isOpen} navbar>\r\n            <Nav className=\"mr-auto\" navbar>\r\n              <NavItem>\r\n                <NavLink className=\"nav-link\" to=\"/home\">Home</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink className=\"nav-link\" to=\"/about\">About</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink className=\"nav-link\" to=\"/services\">Services</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink className=\"nav-link\" to=\"/recipes\">Recipes</NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </div>\r\n      </Navbar>\r\n    </React.Fragment>\r\n  );\r\n}\r\nexport default Header;\r\n\r\n","import React from 'react';\r\n\r\nfunction Footer(){\r\n    return(\r\n        <footer className=\"text-center bg-grey mt-4 position-relative\">\r\n            <p className=\"py-3 my-0\">Copyright &copy; Lababidi,  2021</p>\r\n        </footer>\r\n    );\r\n}\r\nexport default Footer;","import React from 'react';\r\n\r\nfunction Loading (){\r\n    return (\r\n        <div className=\"col-12 text-center\">\r\n            {/* <i class=\"fas fa-spinner fa-spin fa-3x\"></i> */}\r\n            <i class=\"fas fa-cookie-bite fa-spin fa-3x\"></i>\r\n            <p className=\"font-weight-bold mt-1\">Loading ...</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Loading;","import React, {useState} from 'react';\r\nimport Loading from './Loading';\r\nimport { Card, CardImg, CardBody, CardTitle, CardText, CardImgOverlay, Carousel, CarouselItem, CarouselControl,\r\n        CarouselIndicators, CarouselCaption, Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Home(props) {\r\n\r\n    const items = [\r\n        {\r\n          src: \"../assets/images/Feast.png\",\r\n          altText: 'Welcome',\r\n          caption: \"This is the place where you'll get the best recipes in the world!\",\r\n          header: 'Welcome to RecipesWorld!',\r\n          key: '1'\r\n        },\r\n        {\r\n          src: \"../assets/images/Waffles.png\",\r\n          altText: 'Variety of cuisines',\r\n          caption: \"Explore classic recipes from around the world and try new cuisines\",\r\n          header: 'Variety of Cuisines',\r\n          key: '2'\r\n        },\r\n        {\r\n          src: \"../assets/images/Healthy.png\",\r\n          altText: 'Different Diets',\r\n          caption: \"Pick recipes that are compatible with your diet\",\r\n          header: 'Different Diets',\r\n          key: '3'\r\n        }\r\n      ];\r\n\r\n    const [activeIndex, setActiveIndex] = useState(0);\r\n    const [animating, setAnimating] = useState(false);\r\n    const [imgSources, setImgSources] = useState([\r\n      require(\"../assets/images/Feast.png\"),\r\n      require(\"../assets/images/Waffles.png\"),\r\n      require(\"../assets/images/Healthy.png\")\r\n    ])\r\n  \r\n    const next = () => {\r\n      if (animating) return;\r\n      const nextIndex = activeIndex === items.length - 1 ? 0 : activeIndex + 1;\r\n      setActiveIndex(nextIndex);\r\n    }\r\n  \r\n    const previous = () => {\r\n      if (animating) return;\r\n      const nextIndex = activeIndex === 0 ? items.length - 1 : activeIndex - 1;\r\n      setActiveIndex(nextIndex);\r\n    }\r\n  \r\n    const goToIndex = (newIndex) => {\r\n      if (animating) return;\r\n      setActiveIndex(newIndex);\r\n    }\r\n  \r\n    const slides = items.map((item, index) => {\r\n      return (\r\n        <CarouselItem\r\n          className=\"custom-tag\"\r\n          onExiting={() => setAnimating(true)}\r\n          onExited={() => setAnimating(false)}\r\n          key={item.src}\r\n        >\r\n          <img src={imgSources[index]} alt={item.altText} />\r\n          <div className=\"overlay\"></div>\r\n          <CarouselCaption captionText={item.caption} captionHeader={item.header} />\r\n        </CarouselItem>\r\n      );\r\n    });\r\n  \r\n    let view = null;\r\n\r\n    if (props.featuredState.isLoading) {\r\n            view = <Loading />\r\n    } else if (props.featuredState.errMsg) {\r\n        view =  <div className=\"col-12 text-center\">\r\n                    <h1>{props.featuredState.errMsg}</h1>\r\n                </div>\r\n    } else {\r\n        if (!props.featuredState.featured || props.featuredState.featured.length === 0) {\r\n               view= <div className=\"col-12 text-center text-danger\">\r\n                            <h1>Sorry, you have exceeded the number of allowed requests ...</h1>\r\n                    </div>\r\n        } else {\r\n          view = props.featuredState.featured.map(recipe => {\r\n                  const to = \"recipes/\"+recipe.id;\r\n                  return (\r\n                      <div className=\"col-12 col-md-4 recipe-card py-3\">\r\n                          <Link to={to}>\r\n                              <Card className=\"h-100\">\r\n                                  <CardImg top width=\"100%\" src={recipe.image} alt={recipe.title} className=\"img-thumbnail\" />\r\n                                  <CardImgOverlay className=\"d-flex justify-content-center align-items-center\">\r\n                                      <Button className=\"btn btn-danger\">View Details</Button>\r\n                                  </CardImgOverlay>\r\n                                  <CardBody className=\"d-flex flex-column justify-content-between pb-1\">\r\n                                      <CardTitle tag=\"h5\" className=\"mb-2\">{recipe.title}</CardTitle>\r\n                                      <CardText className=\"d-flex justify-content-between flex-wrap\">\r\n                                          <p><i class=\"far fa-clock\"></i> {recipe.readyInMinutes} Minutes</p>\r\n                                          <p><i class=\"fas fa-user\"></i> servings: {recipe.servings}</p>\r\n                                      </CardText>\r\n                                  </CardBody>\r\n                              </Card>\r\n                          </Link>\r\n                      </div>\r\n                  );\r\n              })\r\n        }\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <Carousel\r\n                className=\"relative-content\"\r\n                activeIndex={activeIndex}\r\n                next={next}\r\n                previous={previous}\r\n            >\r\n                <CarouselIndicators items={items} activeIndex={activeIndex} onClickHandler={goToIndex} />\r\n                {slides}\r\n                <CarouselControl direction=\"prev\" directionText=\"Previous\" onClickHandler={previous} />\r\n                <CarouselControl direction=\"next\" directionText=\"Next\" onClickHandler={next} />\r\n            </Carousel>\r\n            <div className=\"home-featured mt-3\">\r\n                <div className=\"container\">\r\n                    <h1 className=\"title text-center my-4\"><span>Our Most Popular Recipes</span></h1>\r\n                    <div className=\"row my-5\">\r\n                      {view}\r\n                    </div>\r\n                    <div className=\"row justify-content-center\">\r\n                        <Link to=\"/recipes\"><Button id=\"get-recipe\" className=\"btn btn-danger py-2 px-4 mx-auto\">Get A Recipe!</Button></Link>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default Home;","import React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction About() {\r\n    return (\r\n        <div className=\"container about\">\r\n            <div className=\"row align-items-center my-3 my-md-5\">\r\n                <div className=\"col-12 col-md-6 text-center slideInLeft\">\r\n                    <h2 className=\"title my-3\">\r\n                        <span>Our Aim</span>\r\n                    </h2>\r\n                    <p>\r\n                        Whether you live on your own or are a busy parent, finding the time and energy to prepare home-cooked meals can seem like a daunting task. At the end of a hectic day, eating out or ordering in might feel like the quickest, easiest option. But convenience and processed food can take a significant toll on your mood and health.\r\n                    </p>\r\n                    <p>\r\n                        The good news is, cooking is easier than what people think. It can drastically improve your health and is more fun and cheaper than eating out.\r\n                                                That's why we brought you the best recipes in the world all gathered in one place!\r\n                    </p>\r\n                </div>\r\n                <div className=\"col-12 col-md-6 slideInRight\">\r\n                    <img src={require(\"../assets/images/Cooking.png\")} alt=\"cooking at home\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row my-3 my-md-5\">\r\n                <div className=\"col-12\">\r\n                    <h2 className=\"title text-center my-3\">\r\n                        <span>Benefits of Cooking at Home</span>\r\n                    </h2>\r\n                </div>\r\n            </div>\r\n            <div className=\"row align-items-center my-5\">\r\n                <div className=\"col-12 col-md-6 order-last order-md-first\">\r\n                    <img src={require(\"../assets/images/Healthyfood.jpg\")} alt=\"healthy-food\"/>\r\n                </div>\r\n                <div className=\"col-12 col-md-6\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-10 mx-auto text-center\">\r\n                            <h4>You have more control over the ingredients</h4>\r\n                            <p>By cooking for yourself, you can ensure that you and your family eat fresh, wholesome meals. This can help you look and feel healthier, boost your energy, stabilize your weight and mood, and improve your sleep and resilience to stress.</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row align-items-center my-5\">\r\n                <div className=\"col-12 col-md-6\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-10 mx-auto text-center\">\r\n                            <h4>You pay more attention to your meal size</h4>\r\n                            <p>\r\n                                Many restaurants serve portions that are two to three times larger than the recommended dietary guidelines. This encourages you to eat more than you would at home, adversely affecting your waistline, blood pressure, and risk of diabetes.</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12 col-md-6\">\r\n                    <img src={require(\"../assets/images/Mealsize.jpg\")} alt=\"meal size\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row align-items-center my-5\">\r\n                <div className=\"col-12 col-md-6 order-last order-md-first\">\r\n                    <img src={require(\"../assets/images/Family.jpg\")} alt=\"family-cooking\"/>\r\n                </div>\r\n                <div className=\"col-12 col-md-6\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-10 mx-auto text-center\">\r\n                            <h4>A great way to spend time with your family</h4>\r\n                            <p>Cooking together gives families a time to share, bond and work together. The reality of today’s family is that most of us are busy, with work, school, kids’ activities, homework and other responsibilities gobbling up most of our time. Setting aside a time where the entire family can work together to create a meal gives us a chance to pause, catch up and just connect with each other.</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row justify-content-center\">\r\n                <Link to=\"/recipes\"><Button id=\"get-recipe\" className=\"btn btn-danger py-2 px-4 mx-auto\">Get A Recipe!</Button></Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default About;\r\n","import React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Services() {\r\n    return (\r\n        <div className=\"container services\">\r\n            <h1 className=\"title text-center my-5\"><span>Our Services</span></h1>\r\n            <div className=\"row align-items-center my-5\">\r\n                <div className=\"col-12 col-md-6\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-10 mx-auto text-center\">\r\n                            <p className=\"service\"><button className=\"number btn btn-danger rounded-circle mr-2 mb-1\">1</button> We provide you with recipes using ingredients you already have in your fridge</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12 col-md-6 fadeIn\">\r\n                    <img src={require(\"../assets/images/Fridge.jpg\")} alt=\"fridge\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row align-items-center my-5\">\r\n                <div className=\"col-12 col-md-6 order-last order-md-first  fadeIn\">\r\n                    <img src={require(\"../assets/images/Diet.jpg\")} alt=\"diet\"/>\r\n                </div>\r\n                <div className=\"col-12 col-md-6\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-10 mx-auto text-center\">\r\n                            <p className=\"service\"><button className=\"number btn btn-danger rounded-circle mr-2 mb-1\">2</button> You can specify nutritional values that you want your meal to have</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row align-items-center my-5\">\r\n                <div className=\"col-12 col-md-6\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-10 mx-auto text-center\">\r\n                            <p className=\"service\"><button className=\"number btn btn-danger rounded-circle mr-2 mb-1\">3</button> We have thousands of recipes from different cuisines</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12 col-md-6  fadeIn\">\r\n                    <img src={require(\"../assets/images/Noodles.jpg\")} alt=\"noodles\"/>\r\n                </div>\r\n            </div>\r\n            <div className=\"row justify-content-center\">\r\n                <Link to=\"/recipes\"><Button id=\"get-recipe\" className=\"btn btn-danger py-2 px-4 mx-auto\">Get A Recipe!</Button></Link>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Services;\r\n","import React, { useState } from 'react';\r\nimport { Form, FormGroup, Label, Input, Row, Col, Button, Collapse } from 'reactstrap';\r\n\r\nconst FiltersForm = ({ addFields, resetSecondForm, clearResults }) => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const toggle = () => setIsOpen(!isOpen);\r\n    const resetFiltersForm = ()=>{\r\n        const formElements = Array.from(document.getElementById(\"filtersForm\"));\r\n\r\n        for(let i=0; i<formElements.length; i++){\r\n            formElements[i].disabled = false;\r\n            formElements[i].checked = false;\r\n        }\r\n        setIsOpen(false);\r\n        resetSecondForm();\r\n        clearResults();\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        resetSecondForm();\r\n        const elements = Array.from(e.target.elements);\r\n        let objects = elements.map(el => {\r\n            if(el.id === \"reset-btn\"){\r\n                return null\r\n            } else if(el.id === \"select-btn\"){\r\n                el.disabled = true;\r\n                return null;\r\n            } else {\r\n                el.disabled = true;\r\n                return {\r\n                    [el.id]: el.checked\r\n                }\r\n            }\r\n        })\r\n\r\n        objects = objects.filter(value => value !== null)\r\n\r\n        const result = objects.filter(obj => Object.values(obj)[0] === true).map(obj => Object.keys(obj)[0]);\r\n        addFields(result);\r\n    }\r\n\r\n    const createCheckbox = (info, title, index) => {\r\n        return (\r\n            <Col xs={6} md={3} key={index}>\r\n                <FormGroup check>\r\n                    <Label htmlFor={info} check>\r\n                        <Input type=\"checkbox\" id={info} name={info}/>{' '}\r\n                            {title}\r\n                    </Label>\r\n                </FormGroup>\r\n            </Col>\r\n        );\r\n    }\r\n\r\n    const checkboxes = [[\"query\", \"Recipe Name\"], [\"includeIngredients\", \"Include Ingredients\"], [\"excludeIngredients\", \"Exclude Ingredients\"],\r\n                        [\"cuisine\", \"cuisine\"], [\"diet\", \"diet\"], [\"type\", \"type\"], [\"maxReadyTime\", \"Maximum Time to Prepare\"],\r\n                        [\"minCarbs\", \"Minimum Carbs\"], [\"maxCarbs\", \"Maximum Carbs\"], [\"minProtein\", \"Minimum Protein\"], [\"maxProtein\", \"Maximum Protein\"],\r\n                        [\"minCalories\", \"Minimum Calories\"], [\"maxCalories\", \"Maximum Calories\"], [\"minFat\", \"Minimum Fat\"], [\"maxFat\", \"Maximum Fat\"],\r\n                        [\"minFiber\", \"Minimum Fiber\"], [\"maxFiber\", \"Maximum Fiber\"], [\"minSugar\", \"Minimum Sugar\"], [\"maxSugar\", \"Maximum Sugar\"],\r\n                        [\"equipment\", \"Needed Equipments\"]];\r\n    const renderCheckboxes = checkboxes.map((box, index) => createCheckbox(box[0], box[1], index));\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"my-3 d-flex align-items-center\">\r\n                <Button className=\"number btn btn-danger rounded-circle mr-2\">1</Button> \r\n                <h4 className=\"d-inline-block mb-0 mr-2\">Select what to include</h4>\r\n                <Button className=\"mx-1 px-2 py-1\"  outline color=\"secondary\" onClick={toggle}>\r\n                    <i class=\"fas fa-chevron-down\"></i>\r\n                </Button>\r\n                <Button className=\"ml-auto px-3\" id=\"reset-btn\" outline color=\"secondary\" onClick={resetFiltersForm}>Reset Everything</Button>\r\n            </div>\r\n            <Collapse isOpen={isOpen}>\r\n                <div id=\"filtersFormStyling\" className=\"bg-cover px-5 pt-3 rounded\">\r\n                    <Form id=\"filtersForm\" onSubmit={handleSubmit}>\r\n                        <Row form>\r\n                            {renderCheckboxes}\r\n                        </Row>\r\n                        <div className=\"row justify-content-center\">\r\n                            <Button id=\"select-btn\" type=\"submit\" color=\"dark\" className=\"px-5 my-3 rounded\">Select</Button>\r\n                        </div>\r\n                    </Form>\r\n                </div>\r\n            </Collapse>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default FiltersForm;","import React from 'react';\r\nimport { LocalForm, Control, Errors } from 'react-redux-form';\r\nimport { Label, Row, Col, Button } from 'reactstrap';\r\n\r\nconst isNumber = (val) => !isNaN(Number(val))\r\nconst FieldsForm = ({ renderFields, fetchResults }) => {\r\n    const handleSubmit = (values) => {\r\n        let url = \"https://api.spoonacular.com/recipes/complexSearch?\"\r\n        const keys = Object.keys(values);\r\n        url = url + keys[0] + \"=\" + values[keys[0]]\r\n        for (let i = 1; i < keys.length; i++) {\r\n            url += \"&\" + keys[i] + \"=\" + values[keys[i]]\r\n        }\r\n        url += \"&instructionsRequired=true&addRecipeInformation=true&addRecipeNutrition=true&number=9&apiKey=3396f8e993fe45228a86ecd6c9081e4d\"\r\n        fetchResults(url);\r\n    }\r\n\r\n    const applyBtn = () => {\r\n        if (renderFields !== null) {\r\n            return (\r\n                <div className=\"row justify-content-center\">\r\n                    <Button color=\"dark\" className=\"px-5\">Apply</Button>\r\n                </div>\r\n            );\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n    let form = null\r\n    if (renderFields!==null){\r\n        form =  <div className=\"fieldsFormStyling px-5\">\r\n                    <LocalForm onSubmit={values => handleSubmit(values)}>\r\n                        <Row>\r\n                            {renderFields}\r\n                        </Row>\r\n                        {applyBtn()}\r\n                    </LocalForm>\r\n                </div>\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"my-3 d-flex align-items-center\">\r\n                <Button className=\"number btn btn-danger rounded-circle mr-2\">2</Button> \r\n                <h4 className=\"d-inline-block mb-0 mr-2\">Fill in some information</h4>\r\n            </div>\r\n            {form}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport function renderField(field) {\r\n    switch (field) {\r\n        case \"query\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"query\" className=\"\">Recipe Name</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".query\" id=\"query\" name=\"query\"\r\n                                placeholder=\"e.g. pasta\"\r\n                                className=\"form-control\" required\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"includeIngredients\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"includeIngredients\">Include Ingredients (Please add a comma separated list of items)</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".includeIngredients\" id=\"includeIngredients\" name=\"includeIngredients\"\r\n                                placeholder=\"e.g. apples, oranges\"\r\n                                className=\"form-control\" required\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"excludeIngredients\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"excludeIngredients\">Exclude Ingredients (Please add a comma separated list of items)</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".excludeIngredients\" id=\"excludeIngredients\" name=\"excludeIngredients\"\r\n                                placeholder=\"e.g. mayonaise, ketchup\"\r\n                                className=\"form-control\" required\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"cuisine\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"cuisine\">Cuisine</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.select model=\".cuisine\" id=\"cuisine\" name=\"cuisine\"\r\n                                className=\"form-control\" required>\r\n                                <option disabled selected hidden value=\"\">Select</option>\r\n                                <option value=\"African\">African</option>\r\n                                <option value=\"American\">American</option>\r\n                                <option value=\"British\">British</option>\r\n                                <option value=\"Chinese\">Chinese</option>\r\n                                <option value=\"European\">European</option>\r\n                                <option value=\"French\">French</option>\r\n                                <option value=\"German\">German</option>\r\n                                <option value=\"Greek\">Greek</option>\r\n                                <option value=\"Indian\">Indian</option>\r\n                                <option value=\"Irish\">Irish</option>\r\n                                <option value=\"Italian\">Italian</option>\r\n                                <option value=\"Japanese\">Japanese</option>\r\n                                <option value=\"Korean\">Korean</option>\r\n                                <option value=\"Mediterranean\">Mediterranean</option>\r\n                                <option value=\"Mexican\">Mexican</option>\r\n                                <option value=\"Middle-Eastern\">Middle Eastern</option>\r\n                                <option value=\"Spanish\">Spanish</option>\r\n                                <option value=\"Thai\">Thai</option>\r\n                                <option value=\"Vietnamese\">Vietnamese</option>\r\n                            </Control.select>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"diet\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"diet\">Diet</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.select model=\".diet\" id=\"diet\" name=\"diet\"\r\n                                className=\"form-control\" required>\r\n                                <option disabled selected hidden value=\"\">Select</option>\r\n                                <option value=\"Gluten-Free\">Gluten Free</option>\r\n                                <option value=\"Ketogenic\">Ketogenic</option>\r\n                                <option value=\"Vegetarian\">Vegetarian</option>\r\n                                <option value=\"Vegan\">Vegan</option>\r\n                            </Control.select>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"type\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"type\">Type</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.select model=\".type\" id=\"type\" name=\"type\"\r\n                                className=\"form-control\" required>\r\n                                <option disabled selected hidden value=\"\">Select</option>\r\n                                <option value=\"main-course\">main course</option>\r\n                                <option value=\"side-dish\">side dish</option>\r\n                                <option value=\"dessert\">dessert</option>\r\n                                <option value=\"appetizer\">appetizer</option>\r\n                                <option value=\"salad\">salad</option>\r\n                                <option value=\"breakfast\">breakfast</option>\r\n                                <option value=\"soup\">soup</option>\r\n                                <option value=\"fingerfood\">fingerfood</option>\r\n                                <option value=\"snack\">snack</option>\r\n                                <option value=\"drink\">drink</option>\r\n                            </Control.select>\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"maxReadyTime\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"maxReadyTime\">Maximum Time to prepare</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".maxReadyTime\" id=\"maxReadyTime\" name=\"maxReadyTime\"\r\n                                placeholder=\"max time in minutes ...\"\r\n                                className=\"form-control\" required\r\n                                validators={{\r\n                                    isNumber\r\n                                }}\r\n                            />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model=\".maxReadyTime\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    isNumber: \"This field should only contain numbers \"\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"minCarbs\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"minCarbs\">Minimum Carbs</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".minCarbs\" id=\"minCarbs\" name=\"minCarbs\"\r\n                                placeholder=\"min amount of carbohydrates in grams\"\r\n                                className=\"form-control\" required\r\n                                validators={{\r\n                                    isNumber\r\n                                }}\r\n                            />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model=\".minCarbs\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    isNumber: \"This field should only contain numbers \"\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"maxCarbs\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"maxCarbs\">Maximum Carbs</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".maxCarbs\" id=\"maxCarbs\" name=\"maxCarbs\"\r\n                                placeholder=\"max amount of carbohydrates in grams\"\r\n                                className=\"form-control mx-0\" required\r\n                                validators={{\r\n                                    isNumber\r\n                                }}\r\n                            />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model=\".maxCarbs\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    isNumber: \"This field should only contain numbers \"\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"minProtein\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"minProtein\">Minimum Protein</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".minProtein\" id=\"minProtein\" name=\"minProtein\"\r\n                                placeholder=\"min amount of protein in grams\"\r\n                                className=\"form-control\" required\r\n                                validators={{\r\n                                    isNumber\r\n                                }}\r\n                            />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model=\".minProtein\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    isNumber: \"This field should only contain numbers \"\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"maxProtein\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"maxProtein\">Maximum Protein</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".maxProtein\" id=\"maxProtein\" name=\"maxProtein\"\r\n                                placeholder=\"max amount of protein in grams\"\r\n                                className=\"form-control mx-0\" required\r\n                                validators={{\r\n                                    isNumber\r\n                                }}\r\n                            />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model=\".maxProtein\"\r\n                                show=\"touched\"\r\n                                messages={{\r\n                                    isNumber: \"This field should only contain numbers \"\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"minCalories\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"minCalories\">Minimum Calories</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".minCalories\" id=\"minCalories\" name=\"minCalories\"\r\n                                placeholder=\"min amount of carbohydrates in grams\"\r\n                                className=\"form-control\" required\r\n                                validators={{\r\n                                    isNumber\r\n                                }}\r\n                                />\r\n                                <Errors\r\n                                    className=\"text-danger\"\r\n                                    model=\".minCalories\"\r\n                                    show=\"touched\"\r\n                                    messages={{\r\n                                        isNumber: \"This field should only contain numbers \"\r\n                                    }}\r\n                                />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"maxCalories\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"maxCalories\">Maximum Calories</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".maxCalories\" id=\"maxCalories\" name=\"maxCalories\"\r\n                                placeholder=\"max amount of calories in grams\"\r\n                                className=\"form-control mx-0\" required\r\n                                validators ={{\r\n                                    isNumber\r\n                                }}\r\n                            />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model =\".maxCalories\"\r\n                                show = \"touched\"\r\n                                messages ={{\r\n                                    isNumber: \"This field should only contain numbers \"\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"minFat\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"minFat\">Minimum Fat</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".minFat\" id=\"minFat\" name=\"minFat\"\r\n                                placeholder=\"min amount of fat in grams\"\r\n                                className=\"form-control\" required\r\n                                validators ={{\r\n                                    isNumber\r\n                                }}\r\n                            />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model =\".minFat\"\r\n                                show = \"touched\"\r\n                                messages ={{\r\n                                    isNumber: \"This field should only contain numbers \"\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"maxFat\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"maxFat\">Maximum Fat</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".maxFat\" id=\"maxFat\" name=\"maxFat\"\r\n                                placeholder=\"max amount of fat in grams\"\r\n                                className=\"form-control mx-0\" required\r\n                                validators ={{\r\n                                    isNumber\r\n                                }}\r\n                            />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model =\".maxFat\"\r\n                                show = \"touched\"\r\n                                messages ={{\r\n                                    isNumber: \"This field should only contain numbers \"\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"minFiber\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"minFiber\">Minimum Fiber</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".minFiber\" id=\"minFiber\" name=\"minFiber\"\r\n                                placeholder=\"min amount of fiber in grams\"\r\n                                className=\"form-control\" required\r\n                                validators ={{\r\n                                    isNumber\r\n                                }}\r\n                            />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model =\".minFiber\"\r\n                                show = \"touched\"\r\n                                messages ={{\r\n                                    isNumber: \"This field should only contain numbers \"\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"maxFiber\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"maxFiber\">Maximum Fiber</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".maxFiber\" id=\"maxFiber\" name=\"maxFiber\"\r\n                                placeholder=\"max amount of fiber in grams\"\r\n                                className=\"form-control\" required\r\n                                validators ={{\r\n                                    isNumber\r\n                                }}\r\n                            />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model =\".maxFiber\"\r\n                                show = \"touched\"\r\n                                messages ={{\r\n                                    isNumber: \"This field should only contain numbers \"\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"minSugar\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"minSugar\">Minimum Sugar</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".minSugar\" id=\"minSugar\" name=\"minSugar\"\r\n                                placeholder=\"min amount of sugar in grams\"\r\n                                className=\"form-control\" required\r\n                                validators ={{\r\n                                    isNumber\r\n                                }}\r\n                            />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model =\".minSugar\"\r\n                                show = \"touched\"\r\n                                messages ={{\r\n                                    isNumber: \"This field should only contain numbers \"\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"maxSugar\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"maxSugar\">Maximum Sugar</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".maxSugar\" id=\"maxSugar\" name=\"maxSugar\"\r\n                                placeholder=\"max amount of sugar in grams\"\r\n                                className=\"form-control\" required\r\n                                validators ={{\r\n                                    isNumber\r\n                                }}\r\n                            />\r\n                            <Errors\r\n                                className=\"text-danger\"\r\n                                model =\".maxSugar\"\r\n                                show = \"touched\"\r\n                                messages ={{\r\n                                    isNumber: \"This field should only contain numbers \"\r\n                                }}\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n        case \"equipment\":\r\n            return (\r\n                <Col xs={12}>\r\n                    <Row className=\"form-group\">\r\n                        <Label xs={12} md={4} htmlFor=\"equipment\">The equipments required (multiple values will be interpreted as or)</Label>\r\n                        <Col xs={12} md={8}>\r\n                            <Control.text model=\".equipment\" id=\"equipment\" name=\"equipment\"\r\n                                placeholder=\"e.g. blender, frying pan, bowl\"\r\n                                className=\"form-control\" required\r\n                            />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n            );\r\n\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n\r\nexport default FieldsForm;","import React, { useState } from 'react';\r\nimport Loading from './Loading';\r\nimport { Card, CardImg, CardBody, CardTitle, CardImgOverlay, CardText, Button } from 'reactstrap';\r\nimport FiltersForm from './FiltersForm';\r\nimport FieldsForm, { renderField } from './FieldsForm';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Info = ({ text }) => {\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col-12 text-center text-danger\">\r\n                <h2>{text}</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nconst renderRecipe = (recipe) => {\r\n    const to = \"recipes/\"+recipe.id;\r\n    return (\r\n        <div className=\"col-12 col-md-4 recipe-card py-3\">\r\n            <Link to={to}>\r\n                <Card className=\"h-100 fadeIn\">\r\n                    <CardImg top width=\"100%\" src={recipe.image} alt={recipe.title} className=\"img-thumbnail\" />\r\n                    <CardImgOverlay className=\"d-flex justify-content-center align-items-center\">\r\n                        <Button className=\"btn btn-danger\">View Details</Button>\r\n                    </CardImgOverlay>\r\n                    <CardBody className=\"d-flex flex-column justify-content-between pb-1\">\r\n                        <CardTitle tag=\"h5\" className=\"mb-2\">{recipe.title}</CardTitle>\r\n                        <CardText className=\"d-flex justify-content-between flex-wrap\">\r\n                            <p><i class=\"far fa-clock\"></i> {recipe.readyInMinutes} Minutes</p>\r\n                            <p><i class=\"fas fa-user\"></i> servings: {recipe.servings}</p>\r\n                        </CardText>\r\n                    </CardBody>\r\n                </Card>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\nfunction Recipes(props) {\r\n\r\n    const [secondForm, setSecondForm] = useState(null)\r\n\r\n    let view = null;\r\n\r\n    if (props.resultState.isEmpty) {\r\n        view = <Info text=\"Sorry, no results were found\" />\r\n    }\r\n    else if (props.resultState.isLoading) {\r\n        view = <Loading />\r\n    } else if (props.resultState.errMsg) {\r\n        view = <Info text={props.resultState.errMsg} />\r\n    } else {\r\n        if(props.resultState.result.length !== 0){\r\n            const recipes = props.resultState.result.map(recipe => renderRecipe(recipe))\r\n            view = <div className=\"container\">\r\n                        <h2 className=\"title text-center my-3\">\r\n                            <span>Available Recipes</span>\r\n                        </h2>\r\n                        <div className=\"row\">\r\n                            {recipes}\r\n                        </div>\r\n                    </div>\r\n        }\r\n    }\r\n    function addFields(fields) {\r\n        if (fields.length === 0) return\r\n        const renderFields = fields.map(field => {\r\n            return renderField(field)\r\n        })\r\n        setSecondForm(renderFields);\r\n    }\r\n\r\n    function resetSecondForm() {\r\n        setSecondForm(null)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n        <div className=\"clock-div position-relative fadeIn\">\r\n            <img id=\"clock\" src={require(\"../assets/images/Clock.jpg\")} alt=\"clock\"/>\r\n            <div className=\"overlay\"></div>\r\n            <div className=\"text text-center my-5\">\r\n                    <p>You are only few steps away from getting your recipe ...</p>\r\n            </div>\r\n        </div>\r\n        <div className=\"container my-4\">\r\n            <h5 className=\"my-5 text-center\">\r\n                Please follow the steps below and get your recipe in less than a minute! <br />\r\n                Remember: you can always reset everything and explore new recipes that suit your taste ...\r\n            </h5>\r\n            <FiltersForm addFields={addFields} resetSecondForm={resetSecondForm} clearResults={props.clearResults}/>\r\n            <FieldsForm renderFields={secondForm} fetchResults={props.fetchResults} />\r\n            <div className=\"my-3 d-flex align-items-center\">\r\n                <Button className=\"number btn btn-danger rounded-circle mr-2\">3</Button> \r\n                <h4 className=\"d-inline-block mb-0 mr-2\">Get your recipe!</h4>\r\n            </div>\r\n            {view}\r\n        </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default Recipes;","import React from 'react';\r\nimport { Card, CardImg, CardBody, CardTitle, CardText, Button } from 'reactstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst renderRecipe = (recipe) => {\r\n    return (\r\n        <Card>\r\n            <CardImg top width=\"100%\" src={recipe.image} alt={recipe.title} className=\"img-thumbnail\" />\r\n            <CardBody className=\"d-flex flex-column justify-content-between pb-1\">\r\n                <CardTitle tag=\"h5\" className=\"mb-2\">{recipe.title}</CardTitle>\r\n                {/* <p className=\"red-border w-75\"></p> */}\r\n                <CardText className=\"d-flex justify-content-between flex-wrap\">\r\n                    <p><i class=\"far fa-clock\"></i> {recipe.readyInMinutes} Minutes</p>\r\n                    <p><i class=\"fas fa-user\"></i> servings: {recipe.servings}</p>\r\n                </CardText>\r\n            </CardBody>\r\n        </Card>\r\n    );\r\n}\r\n\r\nconst renderIngredients = (ingredients) => {\r\n    const items = ingredients.map((curr, index) => {\r\n        return(\r\n            <li key={index} className=\"list-group-item\">\r\n                {curr.amount + \"  \" + curr.name}\r\n            </li>\r\n        );\r\n    })\r\n    return(\r\n        <React.Fragment>\r\n            <h3 className=\"title mb-4 text-center\">\r\n                <span>Ingredients</span>\r\n            </h3>\r\n            <ul className=\"list-group ingredients\">\r\n                {items}\r\n            </ul>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst renderInstructions = (instructions) => {\r\n    const items = instructions.map((curr, index) => {\r\n        return(\r\n            <li key={index}>\r\n                {curr}\r\n            </li>\r\n        );\r\n    })\r\n    return(\r\n        <React.Fragment>\r\n            <h3 className=\"title mb-4\">\r\n                <span>Detailed Instructions</span>\r\n            </h3>\r\n            <ol className=\"\">\r\n                {items}\r\n            </ol>\r\n        </React.Fragment>        \r\n    );\r\n}\r\n\r\nconst renderNutrients = (nutrients) => {\r\n    const bad = [\"Calories\", \"Fat\", \"Saturated Fat\", \"Carbohydrates\", \"Net Carbohydrates\" , \"Sugar\", \"Cholesterol\", \"Sodium\", \"Alcohol\"]\r\n    const items = nutrients.map((curr, index) => {\r\n        const cl = bad.includes(curr.name)? \"table-danger\" : \"table-success\";\r\n        return(\r\n            <tr>\r\n                <td className=\"py-1\">{curr.name}</td>\r\n                <td className=\"py-1\">{curr.amount}</td>\r\n                <td className=\"py-1\"><span className={cl}>{curr.percentOfDailyNeeds} %</span></td>\r\n            </tr>\r\n        );\r\n    })\r\n    return(\r\n        <React.Fragment>\r\n            <h3 className=\"title mb-4\">\r\n                <span>Nutritional Information</span>\r\n            </h3>\r\n            <div className=\"table-responsive\">\r\n                <table class=\"table w-75 my-4\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Amount</th>\r\n                            <th scope=\"col\">Percentage Of Daily Needs</th>\r\n                        </tr>  \r\n                    </thead>\r\n                    <tbody>\r\n                        {items}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </React.Fragment>        \r\n    );\r\n}\r\n\r\nconst RecipeDetail = ({ recipe }) => {\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"container mt-4\">\r\n            <h2 className=\"text-center my-3\"><span className=\"float-left\"><Link to=\"/recipes\"><Button className=\"btn btn-light bg-grey\">Back</Button></Link></span>{recipe.title}</h2>\r\n                <div className=\"row my-5\">\r\n                    <div className=\"col-12 col-md-6\">\r\n                        {renderRecipe(recipe)}                    \r\n                    </div>\r\n                    <div className=\"col-12 col-md-6\">\r\n                        <div className=\"row justify-content-center\">\r\n                            <div className=\"col-10\">\r\n                                {renderIngredients(recipe.ingredients)}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row my-5 instructions\">\r\n                    <div className=\"col-12\">\r\n                        {renderInstructions(recipe.instructions)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"row my-5 justify-content-center\">\r\n                    <div className=\"col-12\">\r\n                        {renderNutrients(recipe.nutrients)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default RecipeDetail;","import * as ActionTypes from './ActionTypes';\r\n\r\nexport const fetchFeatured = () => (dispatch) => {\r\n    dispatch(loadingFeatured());\r\n    fetch(\"https://api.spoonacular.com/recipes/complexSearch?cuisine=American,Italian,Indian&instructionsRequired=true&addRecipeInformation=true&addRecipeNutrition=true&number=6&apiKey=3396f8e993fe45228a86ecd6c9081e4d\")\r\n        .then(response => {\r\n            if (response.ok){\r\n                return response.json();\r\n            } else {\r\n                const err = new Error(\"Error \"+response.status+\": \"+response.statusText);\r\n                throw err;\r\n            }\r\n        }, error => {\r\n            const err = new Error(error.message)\r\n            throw err;\r\n        })\r\n        .then(response => dispatch(addFeatured(response.results)))\r\n        .catch(err => dispatch(featuredFailed(err.message)))\r\n}\r\nexport const loadingFeatured = () => {\r\n    return {\r\n        type: ActionTypes.LOADING_FEATURED,\r\n    }\r\n}\r\nexport const addFeatured = (featured) => {\r\n    const recipesList = featured.map(recipe => {\r\n        return createRecipe(recipe)\r\n    })\r\n    return {\r\n        type: ActionTypes.ADD_FEATURED,\r\n        payload: recipesList\r\n    }\r\n}\r\nexport const featuredFailed = (errMsg) => {\r\n    return {\r\n        type: ActionTypes.FEATURED_FAILED,\r\n        payload: errMsg\r\n    }\r\n}\r\nexport const fetchResults = (url) => (dispatch) => {\r\n    dispatch(loadingResult())\r\n    fetch(url)\r\n        .then(response => {\r\n            if (response.ok){\r\n                return response.json();\r\n            } else {\r\n                const err = new Error(\"Error \"+response.status+\": \"+response.statusText);\r\n                throw err;\r\n            }\r\n        }, error=> {\r\n            const err = new Error(error.message)\r\n            throw err;\r\n        })\r\n        .then(response => {\r\n            setTimeout(() => {\r\n                if(response.results.length === 0){\r\n                    dispatch(emptyResult())\r\n                } else {\r\n                    dispatch(addResult(response.results))\r\n                }\r\n            }, 1000)}\r\n        )\r\n        .catch(err => dispatch(resultFailed(err.message)))\r\n}\r\nexport const loadingResult = () => {\r\n    return {\r\n        type: ActionTypes.LOADING_RESULT,\r\n    }\r\n}\r\nexport const addResult = (result) => {\r\n    const recipesList = result.map(recipe => {\r\n        return createRecipe(recipe)\r\n    })\r\n    return {\r\n        type: ActionTypes.ADD_RESULT,\r\n        payload: recipesList\r\n    } \r\n}\r\nexport const resultFailed = (errMsg) => {\r\n    return {\r\n        type: ActionTypes.RESULT_FAILED,\r\n        payload: errMsg\r\n    }\r\n}\r\nexport const emptyResult = () => {\r\n    return {\r\n        type: ActionTypes.EMPTY_RESULT,\r\n    }\r\n}\r\nexport const clearResults = () => {\r\n    return {\r\n        type: ActionTypes.CLEAR_RESULTS,\r\n        payload: []\r\n    }\r\n}\r\nconst createRecipe = (recipe) => {\r\n    console.log(recipe);\r\n    const id = recipe.id;\r\n    const title = recipe.title;\r\n    const image = recipe.image;\r\n    const readyInMinutes = recipe.readyInMinutes;\r\n    const servings = recipe.servings;\r\n    const ingredients = recipe.nutrition.ingredients.map(item => {\r\n        return {\r\n            name: item.name,\r\n            amount: item.amount + \" \" + item.unit\r\n        }\r\n    })\r\n    let instructions = [\"Sorry, no instructions available ...\"]\r\n    if(recipe.analyzedInstructions.length !== 0)\r\n        instructions = recipe.analyzedInstructions[0].steps.map(obj => obj.step);\r\n    const nutrients = recipe.nutrition.nutrients.map(item => {\r\n        return {\r\n            name: item.name,\r\n            amount: item.amount + \" \" + item.unit,\r\n            percentOfDailyNeeds: item.percentOfDailyNeeds\r\n        }\r\n    })\r\n    const resultRecipe = {\r\n        id,\r\n        title,\r\n        image,\r\n        readyInMinutes,\r\n        servings,\r\n        ingredients,\r\n        instructions,\r\n        nutrients\r\n    }\r\n    return resultRecipe\r\n}","import React, { Component } from 'react';\r\nimport { Switch, Route, Redirect, withRouter } from 'react-router-dom';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\nimport Home from './Home';\r\nimport About from \"./About\";\r\nimport Services from './Services';\r\nimport Recipes from './Recipes';\r\nimport  RecipeDetail from './RecipeDetail'\r\nimport { connect } from 'react-redux';\r\nimport { fetchFeatured, fetchResults, clearResults } from '../redux/ActionCreators';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        featuredState: state.featuredState,\r\n        resultState: state.resultState\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    fetchFeatured: () => dispatch(fetchFeatured()),\r\n    fetchResults: (url) => dispatch(fetchResults(url)),\r\n    clearResults: () => dispatch(clearResults())\r\n})\r\nclass Main extends Component {\r\n    componentDidMount() {\r\n        this.props.fetchFeatured();\r\n    }\r\n    render() {\r\n        const RecipeDetailPage = ({ match }) => {\r\n            let recipe = this.props.resultState.result.find(recipe => recipe.id === parseInt(match.params.recipeId, 10))\r\n            if(!recipe){\r\n                recipe = this.props.featuredState.featured.find(recipe => recipe.id === parseInt(match.params.recipeId, 10))\r\n            }\r\n            return (\r\n                <RecipeDetail recipe={recipe} />\r\n            );\r\n        }\r\n        return (\r\n            <div>\r\n                <Header />\r\n                    <Switch>\r\n                        <Route path=\"/home\">\r\n                            <Home featuredState={this.props.featuredState} />\r\n                        </Route>\r\n                        <Route path=\"/about\" component={About} />\r\n                        <Route path=\"/services\" component={Services} />\r\n                        <Route exact path=\"/recipes\">\r\n                            <Recipes fetchResults={this.props.fetchResults} clearResults={this.props.clearResults}\r\n                                    resultState={this.props.resultState}/>\r\n                        </Route>\r\n                        <Route path=\"/recipes/:recipeId\" component={RecipeDetailPage}/>\r\n                        <Redirect to=\"/home\" />\r\n                    </Switch>\r\n                <Footer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { ConfigureStore } from './redux/configureStore';\nimport Main from './Components/Main';\n\n\nfunction App() {\n  const store = ConfigureStore();\n  return (\n    <Provider store={store}>\n      <Router>\n        <Main />\n      </Router>\n    </Provider>\n  );\n}\nexport default App;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { FeaturedReducer } from './featuredReducer';\r\nimport { ResultReducer } from './resultReducer'\r\nimport thunk from 'redux-thunk';\r\nimport logger from 'redux-logger';\r\n\r\nexport const ConfigureStore = () => {\r\n    const store = createStore(\r\n        combineReducers({\r\n            featuredState: FeaturedReducer,\r\n            resultState: ResultReducer\r\n        }),\r\n        applyMiddleware(thunk, logger)\r\n    );\r\n    return store;\r\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/js/all.js';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}